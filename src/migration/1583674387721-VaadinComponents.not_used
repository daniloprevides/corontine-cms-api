import { AttributeTypeEnum } from './../plugin/enum/attribute-type.enum';
import { Events } from './../plugin/entity/events.entity';
import { Attributes } from './../plugin/entity/attributes.entity';
import { Fields } from './../plugin/entity/fields.entity';
import { Plugin } from './../plugin/entity/plugin.entity';
import {MigrationInterface, QueryRunner, getRepository} from "typeorm";
import { Components } from "../plugin/entity/components.entity";
import { PluginTypeEnum } from "../commons/enum/plugin-type.enum";
import { FieldTypeEnum } from '../plugin/enum/field-type.enum';

export class VaadinComponents1583674387721 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<any> {
        const pluginRepository = getRepository<Plugin>("plugin");
        const componentsRepository = getRepository<Components>("components");
    
        //Finding default plugin data
        const pluginBase = await pluginRepository.findOne({
          where: { pluginType: PluginTypeEnum.BASE }
        });
    
        //Creating the components
        const vaadinComponents = new Components();
        vaadinComponents.clientId = pluginBase?.clientId;
        vaadinComponents.description = "Vaadin Components wrapper";
        vaadinComponents.name = "vaadin_component";
        vaadinComponents.plugin = pluginBase;
        vaadinComponents.url = `{plugin('pluginType','${PluginTypeEnum.BASE}').componentsUrl}/components/components.js`;
        vaadinComponents.fields = [
            this.createField(pluginBase?.clientId,"vaadin-login-form", "Login Page", "login","",false,
            [
                this.createAttribute(pluginBase?.clientId,"disabled","Field disabled", FieldTypeEnum.BOOLEAN,null,null,null,null,null,true),
                this.createAttribute(pluginBase?.clientId,"error","error", FieldTypeEnum.BOOLEAN,false,null,true),
                this.createAttribute(pluginBase?.clientId,"i18n","i18n", FieldTypeEnum.ANY,false,{"form":{"title":"String","username":"String","password":"String","submit":"String","forgotPassword":"String"},"errorMessage":{"title":"String","message":"String"}},{"form":{"title":"Log in","username":"Username","password":"Password","submit":"Log in","forgotPassword":"Forgot password"},"errorMessage":{"title":"Incorrect username or password","message":"Check that you have entered the correct username and password and try again."}},AttributeTypeEnum.PROPERTY),
                this.createAttribute(pluginBase?.clientId,"noForgotPassword","Dont show forgot password",FieldTypeEnum.BOOLEAN,false,null,true),
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"login","Fired when an user submits the login. The event contains username and password values in the detail property."
                    ,FieldTypeEnum.ANY
                    ,{
                        username: FieldTypeEnum.STRING,
                        password: FieldTypeEnum.STRING
                    }),
                this.createEvent(
                    pluginBase?.clientId
                    ,"forgot-password","Fired when user clicks on the \"Forgot password\" button."
                    ,FieldTypeEnum.ANY
                    ,{
                        username: FieldTypeEnum.STRING,
                    })                    
            ]        
        ),
        this.createField(pluginBase?.clientId,"vaadin-text-field", "Text Field", "change","", true,
            [
                ...this.createVaadinTextDefaultAttributes(pluginBase?.clientId)
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"change","Fired when the user commits a value change."
                    ,FieldTypeEnum.STRING),
                this.createEvent(
                    pluginBase?.clientId
                    ,"input","Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button."
                    ,FieldTypeEnum.STRING),
                ]        
        )    ,
        this.createField(pluginBase?.clientId,"vaadin-email-field", "Email Field",  "change","",true,
            [
                ...this.createVaadinTextDefaultAttributes(pluginBase?.clientId)
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"change","Fired when the user commits a value change."
                    ,FieldTypeEnum.STRING),
                this.createEvent(
                    pluginBase?.clientId
                    ,"input","Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button."
                    ,FieldTypeEnum.STRING),
                ]        
        ),
        this.createField(pluginBase?.clientId,"vaadin-number-field", "Number Field",  "change","",true,
            [
                ...this.createVaadinTextDefaultAttributes(pluginBase?.clientId)
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"change","Fired when the user commits a value change."
                    ,FieldTypeEnum.STRING),
                this.createEvent(
                    pluginBase?.clientId
                    ,"input","Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button."
                    ,FieldTypeEnum.STRING),
                ]        
        )  ,
        this.createField(pluginBase?.clientId,"vaadin-password-field", "Password Field",  "change","",true,
            [
                ...this.createVaadinTextDefaultAttributes(pluginBase?.clientId)
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"change","Fired when the user commits a value change."
                    ,FieldTypeEnum.STRING),
                this.createEvent(
                    pluginBase?.clientId
                    ,"input","Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button."
                    ,FieldTypeEnum.STRING),
            ]        
        ),       
        this.createField(pluginBase?.clientId,"vaadin-text-area", "Text Area Field",  "change","",true,
            [
                ...this.createVaadinTextDefaultAttributes(pluginBase?.clientId)
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"change","Fired when the user commits a value change."
                    ,FieldTypeEnum.STRING),
                this.createEvent(
                    pluginBase?.clientId
                    ,"input","Fired when the value is changed by the user: on every typing keystroke, and the value is cleared using the clear button."
                    ,FieldTypeEnum.STRING),
            ]        
        ),
        this.createField(pluginBase?.clientId,"vaadin-select", "Vaadin Select Component",  "change","",true,
            [
                ...this.createVaadinSelectComponent(pluginBase?.clientId)
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"change","Fired when the user commits a value change."
                    ,FieldTypeEnum.STRING),
                this.createEvent(
                    pluginBase?.clientId
                    ,"invalid-changed","Fired when the invalid property changes."
                    ,FieldTypeEnum.STRING),
                this.createEvent(
                    pluginBase?.clientId
                    ,"opened-changed","Fired when the opened property changes."
                    ,FieldTypeEnum.STRING),
                this.createEvent(
                    pluginBase?.clientId
                    ,"value-changed","Fired when the value property changes."
                    ,FieldTypeEnum.STRING),
            ]        
        ),
        this.createField(pluginBase?.clientId,"vaadin-checkbox", "Vaadin Checkbox Component",  "change","",true,
            [
                ...this.createVaadinCheckboxComponent(pluginBase?.clientId)
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"change","Fired when the user commits a value change."
                    ,FieldTypeEnum.BOOLEAN),
                this.createEvent(
                    pluginBase?.clientId
                    ,"checked-changed","Fired when the checked property changes."
                    ,FieldTypeEnum.BOOLEAN),
                this.createEvent(
                    pluginBase?.clientId
                    ,"indeterminate-changed","Fired when the indeterminate property changes."
                    ,FieldTypeEnum.BOOLEAN),
            ]        
        ),
        this.createField(pluginBase?.clientId,"vaadin-date-picker", "Vaadin DatePicker Component",  "change","",true,
            [
                ...this.createVaadinDatePickerComponent(pluginBase?.clientId)
            ],
            [
                this.createEvent(
                    pluginBase?.clientId
                    ,"change","Fired when the user commits a value change."
                    ,FieldTypeEnum.BOOLEAN),
                this.createEvent(
                    pluginBase?.clientId
                    ,"invalid-changed","Fired when the invalid property changes."
                    ,FieldTypeEnum.BOOLEAN),
            ]
        ),
    ];

    await componentsRepository.save(vaadinComponents);
        
        
    }

    private createField(clientId:string, name:string,description: string, defaultEvent:string, defaultEventPath:string,allowInComposer, attributes:Array<Attributes>, events:Array<Events>){

        return {
            clientId: clientId,
            name: name,
            description: description,
            attributes: attributes,
            events: events,
            defaultEvent: defaultEvent,
            defaultEventPath: defaultEventPath,
            allowInComposer: false
        } as Fields;


    }

    private createEvent(clientId:string,name:string,description: string, outputType: FieldTypeEnum, outputDefinition?: any){
        return {
              clientId: clientId,
              name: name,
              description: description,
              outputObjectDefinition: outputDefinition,
              outputType: outputType
            } as Events
    }


    private createAttribute(clientId:string, name:string,description:string = null ,type:FieldTypeEnum, required=false, definition:any = null, defaultValue=null, attributeType=AttributeTypeEnum.PROPERTY,applyAfterSetInComposer = true, removeWhenFalse = false){

        return {
            clientId: clientId,
            name: name,
            defaultValue: defaultValue,
            required: required,
            type: type,
            value: definition,
            description: description,
            attributeType: attributeType,
            applyAfterSetInComposer: applyAfterSetInComposer,
            removeWhenFalse: removeWhenFalse
        } as Attributes;


    }

    private createVaadinTextDefaultAttributes(clientId:string){

        return [
            this.createAttribute(clientId,"autocapitalize","This is a property supported by Safari and Chrome that is used to control whether autocapitalization should be enabled when the user is entering/editing the text. Possible values are: characters: Characters capitalization. words: Words capitalization. sentences: Sentences capitalization. none: No capitalization.",FieldTypeEnum.BOOLEAN,false,null,false,null,null,true),
            this.createAttribute(clientId,"autocomplete","Whether the value of the control can be automatically completed by the browser. List of available options at: https://developer.mozilla.org/en/docs/Web/HTML/Element/input#attr-autocomplete",FieldTypeEnum.BOOLEAN,false,null,false),
            this.createAttribute(clientId,"autocorrect","This is a property supported by Safari that is used to control whether autocorrection should be enabled when the user is entering/editing the text. Possible values are: on: Enable autocorrection. off: Disable autocorrection.",FieldTypeEnum.BOOLEAN,false,null,false),
            this.createAttribute(clientId,"autofocus","Specify that this control should have input focus when the page loads.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"autoselect","Specify that the value should be automatically selected when the field gains focus.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"clearButtonVisible","Set to true to display the clear icon which clears the input.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"disabled","If true, the user cannot interact with this element.",FieldTypeEnum.BOOLEAN,false,null,false,null,null,true),
            this.createAttribute(clientId,"errorMessage","Error to show when the input value is invalid.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"focusElement","focus the element",FieldTypeEnum.BOOLEAN,false,null,false),
            this.createAttribute(clientId,"i18n","Object with translated strings used for localization. ",FieldTypeEnum.ANY,false,{"clear":"String"},{"clear":"Clear"},AttributeTypeEnum.PROPERTY),
            this.createAttribute(clientId,"invalid","This property is set to true when the control value is invalid.",FieldTypeEnum.BOOLEAN,false,null,false,AttributeTypeEnum.PROPERTY,null,true),
            this.createAttribute(clientId,"hasValue","Specifies that the text field has value.",FieldTypeEnum.BOOLEAN,false,null,true,AttributeTypeEnum.PROPERTY),
            this.createAttribute(clientId,"label","String used for the label element.",FieldTypeEnum.STRING,false,null,"Label"),            
            this.createAttribute(clientId,"list","Identifies a list of pre-defined options to suggest to the user. The value must be the id of a <datalist> element in the same document.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"maxlength","Maximum number of characters (in Unicode code points) that the user can enter.",FieldTypeEnum.NUMBER),
            this.createAttribute(clientId,"minlength","Minimum number of characters (in Unicode code points) that the user can enter.",FieldTypeEnum.NUMBER),
            this.createAttribute(clientId,"name","The name of the control, which is submitted with the form data.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"pattern","A regular expression that the value is checked against. The pattern must match the entire value, not just some subset.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"placeholder","A hint to the user of what can be entered in the control.",FieldTypeEnum.STRING,false,null,"Placeholder"),
            this.createAttribute(clientId,"preventInvalidInput","When set to true, user is prevented from typing a value that conflicts with the given pattern.",FieldTypeEnum.BOOLEAN,false,null,true,AttributeTypeEnum.PROPERTY),
            this.createAttribute(clientId,"readonly","This attribute indicates that the user cannot modify the value of the control.",FieldTypeEnum.BOOLEAN,false,null,false),
            this.createAttribute(clientId,"required","Specifies that the user must fill in a value.",FieldTypeEnum.BOOLEAN,false,null,true,null,null,true),
            this.createAttribute(clientId,"title","The text usually displayed in a tooltip popup when the mouse is over the field.",FieldTypeEnum.STRING,false,null,"Tooltip Text"),
            this.createAttribute(clientId,"value","The initial value of the control. It can be used for two-way data binding.",FieldTypeEnum.STRING,false,null,null,null,false),
        ]


    }

    private createVaadinSelectComponent(clientId:string){

        return [
            this.createAttribute(clientId,"autofocus","Specify that this control should have input focus when the page loads.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"disabled","If true, the user cannot interact with this element.",FieldTypeEnum.BOOLEAN,false,null,false,null,null,true),
            this.createAttribute(clientId,"errorMessage","Error to show when the input value is invalid.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"invalid","This property is set to true when the control value is invalid.",FieldTypeEnum.BOOLEAN,false,null,false),
            this.createAttribute(clientId,"label","String used for the label element.",FieldTypeEnum.STRING,false,null,"Label"),            
            this.createAttribute(clientId,"name","The name of the control, which is submitted with the form data.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"opened","Set when the select is open",FieldTypeEnum.BOOLEAN),
            this.createAttribute(clientId,"placeholder","A hint to the user of what can be entered in the control. The placeholder will be displayed in the case that there is no item selected, or the selected item has an empty string label, or the selected item has no label and it's DOM content is empty.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"readonly","This attribute indicates that the user cannot modify the value of the control.",FieldTypeEnum.BOOLEAN,false,null,false,null,null,true),
            this.createAttribute(clientId,"required","Specifies that the user must fill in a value.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"title","The text usually displayed in a tooltip popup when the mouse is over the field.",FieldTypeEnum.STRING,false,null,"Tooltip Text"),
            this.createAttribute(clientId,"value","The initial value of the control. It can be used for two-way data binding.",FieldTypeEnum.STRING,null,null,null,null,false),
            this.createAttribute(clientId,"template","Add content to component.",FieldTypeEnum.LIST_CONTENT),
        ]
    }

    private createVaadinCheckboxComponent(clientId:string){

        return [
            this.createAttribute(clientId,"autofocus","Specify that this control should have input focus when the page loads.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"checked","True if the checkbox is checked.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"disabled","If true, the user cannot interact with this element.",FieldTypeEnum.BOOLEAN,false,null,false,null,null,true),
            this.createAttribute(clientId,"name","The name of the control, which is submitted with the form data.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"value","The value given to the data submitted with the checkbox's name to the server when the control is inside a form.",FieldTypeEnum.BOOLEAN,true,null,true,AttributeTypeEnum.PROPERTY,false),
            this.createAttribute(clientId,"text","The text value of checkbox",FieldTypeEnum.TEMPLATE,null,null,true,AttributeTypeEnum.PROPERTY,true),
        ]
    }


    private createVaadinDatePickerComponent(clientId:string){

        return [
            this.createAttribute(clientId,"autofocus","Specify that this control should have input focus when the page loads.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"clearButtonVisible","Set to true to display the clear icon which clears the input.",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"disabled","If true, the user cannot interact with this element.",FieldTypeEnum.BOOLEAN,false,null,false,null,null,true),
            this.createAttribute(clientId,"errorMessage","Error to show when the input value is invalid.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"focusElement","focus the element",FieldTypeEnum.ANY),
            this.createAttribute(clientId,"i18n","Object with translated strings used for localization. ",FieldTypeEnum.ANY,false, null,null,null,false),

            this.createAttribute(clientId,"initialPosition","Date which should be visible when there is no value selected.The same date formats as for the value property are supported.",FieldTypeEnum.STRING),  
            this.createAttribute(clientId,"invalid","This property is set to true when the control value is invalid.",FieldTypeEnum.BOOLEAN,false,null,false),
            this.createAttribute(clientId,"label","String used for the label element.",FieldTypeEnum.STRING,false,null,"Label"),            
            this.createAttribute(clientId,"max","The latest date that can be selected. All later dates will be disabled.Supported date formats:ISO 8601 \"YYYY-MM-DD\" (default) 6-digit extended ISO 8601 \"+YYYYYY-MM-DD\", \"-YYYYYY-MM-DD",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"min","The earliest date that can be selected. All earlier dates will be disabled.Supported date formats:ISO 8601 \"YYYY-MM-DD\" (default) 6-digit extended ISO 8601 \"+YYYYYY-MM-DD\", \"-YYYYYY-MM-DD\"",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"name","The name of the control, which is submitted with the form data.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"opened","Set true to open the date selector overlay.",FieldTypeEnum.BOOLEAN),
            this.createAttribute(clientId,"placeholder","A hint to the user of what can be entered in the control.",FieldTypeEnum.STRING),
            this.createAttribute(clientId,"readonly","This attribute indicates that the user cannot modify the value of the control.",FieldTypeEnum.BOOLEAN,false,null,false,null,null,true),
            this.createAttribute(clientId,"required","Specifies that the user must fill in a value.",FieldTypeEnum.BOOLEAN,false,null,true,null,null,true),
            this.createAttribute(clientId,"showWeekNumbers","Set true to display ISO-8601 week numbers in the calendar. Notice that displaying week numbers is only supported when i18n.firstDayOfWeek is 1 (Monday).",FieldTypeEnum.BOOLEAN,false,null,true),
            this.createAttribute(clientId,"value","The value for this element.Supported date formats:ISO 8601 \"YYYY-MM-DD\" (default) 6-digit extended ISO 8601 \"+YYYYYY-MM-DD\", \"-YYYYYY-MM-DD\"",FieldTypeEnum.STRING,null,null,null,null,false),
        ]
    }

    public async down(queryRunner: QueryRunner): Promise<any> {
    }

}
